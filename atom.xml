<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>随变</title>
  
  <subtitle>やばり私は日本語が大好き</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://summerangel.github.io/"/>
  <updated>2018-04-25T14:28:45.381Z</updated>
  <id>https://summerangel.github.io/</id>
  
  <author>
    <name>summer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to deploy a website on Mac</title>
    <link href="https://summerangel.github.io/2018/04/25/about-deploy/"/>
    <id>https://summerangel.github.io/2018/04/25/about-deploy/</id>
    <published>2018-04-25T10:01:48.000Z</published>
    <updated>2018-04-25T14:28:45.381Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、-Buy-a-CES（购买一台服务器）"><a href="#一、-Buy-a-CES（购买一台服务器）" class="headerlink" title="一、 Buy a CES（购买一台服务器）"></a>一、 Buy a CES（购买一台服务器）</h4><p>  the link is: <a href="https://ecs-buy-cn-huhehaote.aliyun.com/wizard/#/prepay/cn-huhehaote" target="_blank" rel="external">https://ecs-buy-cn-huhehaote.aliyun.com/wizard/#/prepay/cn-huhehaote</a></p><h4 id="二、Connect-to-Server（连接服务器）"><a href="#二、Connect-to-Server（连接服务器）" class="headerlink" title="二、Connect to Server（连接服务器）"></a>二、Connect to Server（连接服务器）</h4><p>  After you bought a CES, you will have access to login the server they give you,link this</p>  <img src="/2018/04/25/about-deploy/server_one.jpg" alt="the page you will find your public ip" title="the page you will find your public ip"><p>  Open the terminal you usually use, and command following:（打开你常用的终端，输入以下信息）</p><pre><code>ssh root@39.104.121.24(the ip should change to your own public ip 这里的ip应该换成你自己的公网ip)after executing this,the terminal will let you input the passwordthen you will connect to the server;</code></pre><h4 id="三、Install-Node（安装Node）"><a href="#三、Install-Node（安装Node）" class="headerlink" title="三、Install Node（安装Node）"></a>三、Install Node（安装Node）</h4><p>   1、The download link: <a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a></p><p>   we usually choose the source code to install,for it’s better.Click right press and copy the download link;<br>   （我们一般选择source code安装，因为听说更好一点。点击右键复制地址）</p><p>   2、Then we back to the connected server,and to the root directory,and create a empty directory to store all soft we need </p><p>   to install.</p><p>   you can act like this: 1) cd / (this means to the root directory)<br>                          2) mkdir soft (create a directory named soft)</p><p>   3、exectute this in terminal: wget (here is the link you copied in step 1);</p><p>   4、decompression the file in step 3: tar -zxvf (here is compressed file name)</p><p>   5、execute this in terminal: cd (decompressed file name) &amp;&amp; ./configure ;</p><p>   6、execute this in terminal: make &amp;&amp; make install;</p><p>   7、execute this to see if you installed node successfully: node -v or npm -v;</p><p>   8、if you met a problem link:  g++: Command not found, you could execute this to fix: yum install gcc gcc-c++,then repeat<br>      step 7;</p><h4 id="四、Install-nrm-and-pm2"><a href="#四、Install-nrm-and-pm2" class="headerlink" title="四、Install nrm and pm2"></a>四、Install nrm and pm2</h4><p>   1、execute this in terminal: npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p><p>   2、execute this in terminal: npm install -g nrm</p><p>   3、execute this in terminal: npm install -g pm2</p><p>   4、start a pm2 process: pm2 start index.js<br>      restart a pm2 process: pm2 restart id/name;<br>      delete a pm2 process: pm2 delete id/name;<br>      review a pm2 process: pm2 moint;<br>      review all pm2 processes: pm2 list;</p><h4 id="五、Install-Nginx"><a href="#五、Install-Nginx" class="headerlink" title="五、Install Nginx"></a>五、Install Nginx</h4><p>   1、before install nginx, we should install some nginx dependencies;</p><p>   2、execute this in terminal: yum install -y pcre pcre-devel</p><p>   3、execute this in terminal: yum install -y zlib zlib-devel</p><p>   4、execute this in terminal: yum install -y openssl openssl-devel</p><p>   5、go to nginx official website to copy the download link: <a href="https://nginx.org/en/download.html" target="_blank" rel="external">https://nginx.org/en/download.html</a></p><p>   6、execute this in terminal: wget (here is the link copied in step 5)</p><p>   7、execute this in terminal: tar -zxvf (here is the compressed file directory) &amp;&amp; cd (here is the decompressed file directory)</p><p>   9、execute this in terminal: ./configure</p><p>   10、execute this in terminal: make &amp;&amp; make install</p><p>   11、to see where the nginx is: whereis nginx</p><p>   12、to go to sbin directory: cd /usr/local/nginx/sbin</p><p>   13、start nginx: ./nginx</p><pre><code>start nginx: ./nginxstop nginx: ./nginx -s stopquit nginx: ./nginx -s quitreload nginx: ./nginx -s reload</code></pre><h4 id="六、Install-Git"><a href="#六、Install-Git" class="headerlink" title="六、Install Git"></a>六、Install Git</h4><p>   1、execute this in terminal: yum install git</p><p>   2、make sure is the git install done: git –version</p><h4 id="七、repo-in-git-connect-to-server"><a href="#七、repo-in-git-connect-to-server" class="headerlink" title="七、repo in git connect to server"></a>七、repo in git connect to server</h4><p>   1、cd soft</p><p>   2、git clone (here is the git repo link)</p><p>   3、cd (the git repo name)</p><p>   4、npm i</p><p>   5、npm start(according to your repo)</p><p>   6、open the browser with the url: <a href="http://39.104.121.24:3000" target="_blank" rel="external">http://39.104.121.24:3000</a> (replace the ip with your own public ip)</p><h4 id="八、Mistake-I-make"><a href="#八、Mistake-I-make" class="headerlink" title="八、Mistake I make"></a>八、Mistake I make</h4><p>   Because I didn’t add port 3000 to the secure group,I can’t open the link with port 3000 :<a href="http://39.104.121.24:3000。" target="_blank" rel="external">http://39.104.121.24:3000。</a></p>   <img src="/2018/04/25/about-deploy/server_two.jpeg" alt="the page you add your port to secure group" title="the page you add your port to secure group"><p>   and may be this article will solve something: <a href="https://www.jianshu.com/p/9a0f356f89ca" target="_blank" rel="external">https://www.jianshu.com/p/9a0f356f89ca</a></p><h4 id="九、if-you-want-to-know-more-detail-describe"><a href="#九、if-you-want-to-know-more-detail-describe" class="headerlink" title="九、if you want to know more detail describe"></a>九、if you want to know more detail describe</h4><p>  here is the origin website to introduce more: <a href="http://gitbook.cn/books/5a561cfca8b23d387720befc/index.html" target="_blank" rel="external">http://gitbook.cn/books/5a561cfca8b23d387720befc/index.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一、-Buy-a-CES（购买一台服务器）&quot;&gt;&lt;a href=&quot;#一、-Buy-a-CES（购买一台服务器）&quot; class=&quot;headerlink&quot; title=&quot;一、 Buy a CES（购买一台服务器）&quot;&gt;&lt;/a&gt;一、 Buy a CES（购买一台服务器）&lt;/
      
    
    </summary>
    
    
      <category term="deploy" scheme="https://summerangel.github.io/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>create-project-related-git</title>
    <link href="https://summerangel.github.io/2018/04/23/create-project-related-git/"/>
    <id>https://summerangel.github.io/2018/04/23/create-project-related-git/</id>
    <published>2018-04-23T10:16:13.000Z</published>
    <updated>2018-04-23T10:40:24.604Z</updated>
    
    <content type="html"><![CDATA[<h4 id="avoid-forgetting-every-time-forgot-how-to-do"><a href="#avoid-forgetting-every-time-forgot-how-to-do" class="headerlink" title="avoid forgetting(every time forgot how to do)"></a>avoid forgetting(every time forgot how to do)</h4><p>1、 Step One: create a repo on github first, then copy the https’s url;</p><p>2、 Step Two: under your local project folder’s root path execute: git init;</p><p>3、 Step Three: then execute: git add .</p><p>4、 Step Four: then execute: git commit -m “here is some comment about what will be committed”;</p><p>5、 Step Five: then execute: git remote add origin (here is the url copied in step one);</p><p>6、 Step Six: then execute: git pull origin master</p><pre><code>if you confront this problem: fatal: refusing to merge unrelated histories.you can execute this command like this: git pull origin master --allow-unrelated-histories</code></pre><p>7、 Step Seven: then execute: git push -u origin master</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;avoid-forgetting-every-time-forgot-how-to-do&quot;&gt;&lt;a href=&quot;#avoid-forgetting-every-time-forgot-how-to-do&quot; class=&quot;headerlink&quot; title=&quot;avoi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>about-svn</title>
    <link href="https://summerangel.github.io/2018/01/25/about-svn/"/>
    <id>https://summerangel.github.io/2018/01/25/about-svn/</id>
    <published>2018-01-25T13:30:12.000Z</published>
    <updated>2018-01-25T09:42:40.830Z</updated>
    
    <content type="html"><![CDATA[<p>open ~/.npmrc</p><h4 id="just-simple-use-about-svn"><a href="#just-simple-use-about-svn" class="headerlink" title="just simple use about svn"></a>just simple use about svn</h4><pre><code>1、从线上地址拷贝代码到本地：svn checkout (线上地址);2、更新本地的svn中的代码：svn up;3、更改npm的源：打开.npmrc文件：open ~/.npmrc；4、查看文件：cat package.json把下列代码复制进.npmrc文件中： sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ phantomjs_cdnurl=http://cnpmjs.org/downloads electron_mirror=https://npm.taobao.org/mirrors/electron/ python_mirror=https://npm.taobao.org/mirrors/python</code></pre><p>  以上，安装依赖时会快很多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;open ~/.npmrc&lt;/p&gt;
&lt;h4 id=&quot;just-simple-use-about-svn&quot;&gt;&lt;a href=&quot;#just-simple-use-about-svn&quot; class=&quot;headerlink&quot; title=&quot;just simple use about
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>about-plugin-use</title>
    <link href="https://summerangel.github.io/2017/11/10/about-plugin-use/"/>
    <id>https://summerangel.github.io/2017/11/10/about-plugin-use/</id>
    <published>2017-11-10T13:38:09.000Z</published>
    <updated>2017-12-27T07:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用Swiper"><a href="#使用Swiper" class="headerlink" title="使用Swiper:"></a>使用Swiper:</h4><pre><code>当多个滑动时，尤其是显示其中一个隐藏其他的时候，可能会样式错乱，这个时候要在显示后初始化（注意好时机），还不行时使用destory(true, true)；</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用Swiper&quot;&gt;&lt;a href=&quot;#使用Swiper&quot; class=&quot;headerlink&quot; title=&quot;使用Swiper:&quot;&gt;&lt;/a&gt;使用Swiper:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;当多个滑动时，尤其是显示其中一个隐藏其他的时候，可能会样式错乱，这个时候
      
    
    </summary>
    
    
      <category term="技术" scheme="https://summerangel.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>about-css</title>
    <link href="https://summerangel.github.io/2017/10/22/about-css/"/>
    <id>https://summerangel.github.io/2017/10/22/about-css/</id>
    <published>2017-10-22T13:38:09.000Z</published>
    <updated>2017-12-27T07:26:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单行显示省略号："><a href="#单行显示省略号：" class="headerlink" title="单行显示省略号："></a>单行显示省略号：</h4><pre><code> overflow: hidden; text-overflow: ellipsis; white-space: nowrap;多行显示省略号： display: -webkit-box; -webkit-line-clamp: 2; （多少行的时候显示） -webkit-box-orient: vertical; overflow: hidden;三角箭头：.left_arrow {      position: relative;      .arrow_left {        margin: 5px auto;        width: 0;        height: 0;        position: absolute;        left: -11px;        top: -7px;        .triangle_top {          border-left: 12px solid transparent;          border-right: 0px solid transparent;          border-bottom: 27px solid #FAD961;        }        .triangle_bottom {          border-left: 12px solid transparent;          border-right: 0 solid transparent;          border-top: 27px solid #FAD961;        }      }      .count_down {        padding: 6px 14px 7px 15px;        height: 51px;        background: linear-gradient(90deg, #FAD961 0%, #FF8E4E 100%);      }    }</code></pre><h4 id="在移动端样式中，尽量不要写position-fixed-（eg-弹框：可以换成position-absolute-然后在底下那层加上position-relative-）"><a href="#在移动端样式中，尽量不要写position-fixed-（eg-弹框：可以换成position-absolute-然后在底下那层加上position-relative-）" class="headerlink" title="在移动端样式中，尽量不要写position: fixed;（eg:弹框：可以换成position: absolute;然后在底下那层加上position: relative;）"></a>在移动端样式中，尽量不要写position: fixed;（eg:弹框：可以换成position: absolute;然后在底下那层加上position: relative;）</h4><h4 id="垂直居中-https-segmentfault-com-a-1190000000468431"><a href="#垂直居中-https-segmentfault-com-a-1190000000468431" class="headerlink" title="垂直居中 (https://segmentfault.com/a/1190000000468431)"></a>垂直居中 (<a href="https://segmentfault.com/a/1190000000468431" target="_blank" rel="external">https://segmentfault.com/a/1190000000468431</a>)</h4><pre><code>.center-vertical {  position: relative;  top: 50%;  transform: transformY(-50%);}或.center-vertical {   position: relative;   left: 50%;   transform: transformX(-50%);}</code></pre><h4 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h4><pre><code>div {    box-shadow: 0 0 0 6px rgba(0, 0, 0, 0.2), 0 0 0 12px rgba(0, 0, 0, 0.2), 0 0 0 18px rgba(0, 0, 0, 0.2), 0 0 0 24px rgba(0, 0, 0, 0.2);    height: 200px;    margin: 50px auto;    width: 400px}</code></pre><h4 id="浮点数转成整型：-0和-或"><a href="#浮点数转成整型：-0和-或" class="headerlink" title="浮点数转成整型：|0和~~或+"></a>浮点数转成整型：|0和~~或+</h4><pre><code>eg: var foo = (12.4 / 4.13) | 0;//结果为3    var bar = ~~(12.4 / 4.13);//结果为3</code></pre><h4 id="关于console"><a href="#关于console" class="headerlink" title="关于console"></a>关于console</h4><pre><code>var _log = console.log;console.log = function() {  _log.call(console, &apos;%c&apos; + [].slice.call(arguments).join(&apos; &apos;), &apos;color:transparent;text-shadow:0 0 2px rgba(0,0,0,.5);&apos;);};</code></pre><h4 id="半圆角："><a href="#半圆角：" class="headerlink" title="半圆角："></a>半圆角：</h4><pre><code>.left_circle {        left: -2px;        border: 1px solid #D6D6D6;        border-radius: 0 100% 100% 0/50%;        border-left: none;      }      .right_circle {        border: 1px solid #D6D6D6;        border-radius: 100% 0 0 100%/50%;        border-right: none;        right: -2px;      }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;单行显示省略号：&quot;&gt;&lt;a href=&quot;#单行显示省略号：&quot; class=&quot;headerlink&quot; title=&quot;单行显示省略号：&quot;&gt;&lt;/a&gt;单行显示省略号：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; overflow: hidden;
 text-overflow: ell
      
    
    </summary>
    
    
      <category term="技术" scheme="https://summerangel.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>about-javascript</title>
    <link href="https://summerangel.github.io/2017/10/22/about-javascript/"/>
    <id>https://summerangel.github.io/2017/10/22/about-javascript/</id>
    <published>2017-10-22T13:37:34.000Z</published>
    <updated>2018-01-25T06:18:13.895Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、1-Use-computed-property-names-when-creating-objects-with-dynamic-property-names"><a href="#1、1-Use-computed-property-names-when-creating-objects-with-dynamic-property-names" class="headerlink" title="1、1) Use computed property names when creating objects with dynamic property names."></a>1、1) Use computed property names when creating objects with dynamic property names.</h4><pre><code> eg: function getKey(k) {       return `a key named ${k}`;     }     const obj = {       id: 5,       name: &apos;San Francisco&apos;,       [getKey(&apos;enabled&apos;)]: true,     };2) Use array spreads ... to copy arrays.   eg: const len = items.length;       const itemsCopy = [];       const itemsCopy = [...items];3) To convert an array-like object to an array, use Array.from.   eg: const foo = document.querySelectorAll(&apos;.foo&apos;);       const nodes = Array.from(foo);4) Brilliant Array.prototype.reduce()   eg: // friends - an array of objects       // where object field &quot;books&quot; - list of favorite books       var friends = [{         name: &apos;Anna&apos;,         books: [&apos;Bible&apos;, &apos;Harry Potter&apos;],         age: 21       }, {         name: &apos;Bob&apos;,         books: [&apos;War and peace&apos;, &apos;Romeo and Juliet&apos;],         age: 26       }, {         name: &apos;Alice&apos;,         books: [&apos;The Lord of the Rings&apos;, &apos;The Shining&apos;],         age: 18       }];       // allbooks - list which will contain all friends&apos; books +       // additional list contained in initialValue       var allbooks = friends.reduce(function(prev, curr) {         return [...prev, ...curr.books];       }, [&apos;Alphabet&apos;]);       // allbooks = [       //   &apos;Alphabet&apos;, &apos;Bible&apos;, &apos;Harry Potter&apos;, &apos;War and peace&apos;,       //   &apos;Romeo and Juliet&apos;, &apos;The Lord of the Rings&apos;,       //   &apos;The Shining&apos;       // ]5) Use object destructuring when accessing and using multiple properties of an object. jscs:   eg: // good       function getFullName(user) {         const { firstName, lastName } = user;         return `${firstName} ${lastName}`;       }       // best       function getFullName({ firstName, lastName }) {         return `${firstName} ${lastName}`;       }6) Never use arguments, opt to use rest syntax ... instead   eg: // bad       function concatenateAll() {         const args = Array.prototype.slice.call(arguments);         return args.join(&apos;&apos;);       }       // good       function concatenateAll(...args) {         return args.join(&apos;&apos;);       }7) Never mutate parameters   eg: // bad       function f1(obj) {         obj.key = 1;       };       // good       function f2(obj) {         const key = Object.prototype.hasOwnProperty.call(obj, &apos;key&apos;) ? obj.key : 1;       };</code></pre><h4 id="Check-is-weixin-or-is-alipay"><a href="#Check-is-weixin-or-is-alipay" class="headerlink" title="Check is weixin or is alipay:"></a>Check is weixin or is alipay:</h4><pre><code>function IsWeixinOrAlipay(){    var ua = window.navigator.userAgent.toLowerCase();    //判断是不是微信    if (ua.indexOf(&apos;micromessenger&apos;) &gt;= 0) {        return &quot;WeiXIN&quot;;    }    //判断是不是支付宝    if (ua.indexOf(&apos;alipayclient&apos;) &gt;= 0) {        return &quot;Alipay&quot;;    }    //哪个都不是    return &quot;false&quot;;}</code></pre><h4 id="初始化一个所有元素都相同的数组"><a href="#初始化一个所有元素都相同的数组" class="headerlink" title="初始化一个所有元素都相同的数组"></a>初始化一个所有元素都相同的数组</h4><pre><code>eg:Array(8).fill(1) //初始化一个数组，元素都为1</code></pre><h4 id="We-call-slice-to-copy-the-squares-array-instead-of-mutating-the-existing-array"><a href="#We-call-slice-to-copy-the-squares-array-instead-of-mutating-the-existing-array" class="headerlink" title="We call .slice() to copy the squares array instead of mutating the existing array"></a>We call .slice() to copy the squares array instead of mutating the existing array</h4><pre><code>eg: const squares = this.state.squares.slice();        squares[i] = &apos;X&apos;;        this.setState({squares: squares});</code></pre><h4 id="转义字符："><a href="#转义字符：" class="headerlink" title="转义字符："></a>转义字符：</h4><pre><code>eg:  JSON.parse(cashier.replace(/&amp;quot;/gi,&apos;&quot;&apos;));</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、1-Use-computed-property-names-when-creating-objects-with-dynamic-property-names&quot;&gt;&lt;a href=&quot;#1、1-Use-computed-property-names-when-cr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>about-react</title>
    <link href="https://summerangel.github.io/2017/10/22/about-react/"/>
    <id>https://summerangel.github.io/2017/10/22/about-react/</id>
    <published>2017-10-22T13:36:07.000Z</published>
    <updated>2017-11-07T05:13:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="record-something-happened-in-react-project"><a href="#record-something-happened-in-react-project" class="headerlink" title="record something happened in react project"></a>record something happened in react project</h2><h4 id="about-div-editable"><a href="#about-div-editable" class="headerlink" title="about div editable"></a>about div editable</h4><p>  使用contentEditable属性让div可编辑时，去掉react警告：</p><p>  “<br>  contentEditable=”true” suppressContentEditableWarning=”true”<br>  “</p><h4 id="input焦点自动定位：autoFocus"><a href="#input焦点自动定位：autoFocus" class="headerlink" title="input焦点自动定位：autoFocus"></a>input焦点自动定位：autoFocus</h4><pre><code>reference: https://github.com/erikras/redux-form/issues/1382</code></pre><h4 id="生成二维码插件"><a href="#生成二维码插件" class="headerlink" title="生成二维码插件"></a>生成二维码插件</h4><pre><code>https://github.com/soldair/node-qrcode</code></pre><h4 id="care-about"><a href="#care-about" class="headerlink" title="care about"></a>care about</h4><pre><code>1、元素要有闭合标签，避免提示错误2、在react中使用this.变量名（当该变量变动时，不会触发render），如要render也更新，需将变量放在this.state里面</code></pre><h4 id="使用classnames-动态加样式，eg-className-‘card-box’-otherStyle-‘show’-this-props-isShow"><a href="#使用classnames-动态加样式，eg-className-‘card-box’-otherStyle-‘show’-this-props-isShow" class="headerlink" title="使用classnames, 动态加样式，eg: className(‘card-box’, otherStyle, {‘show’: (this.props.isShow)})"></a>使用classnames, 动态加样式，eg: className(‘card-box’, otherStyle, {‘show’: (this.props.isShow)})</h4><h4 id="Data-change-without-mutation"><a href="#Data-change-without-mutation" class="headerlink" title="Data change without mutation"></a>Data change without mutation</h4><pre><code>eg: var player = {score: 1, name: &apos;Jeff&apos;};    var newPlayer = Object.assign({}, player, {score: 2});    // Now player is unchanged, but newPlayer is {score: 2, name: &apos;Jeff&apos;}    // Or if you are using object spread syntax proposal, you can write:    // var newPlayer = {...player, score: 2};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;record-something-happened-in-react-project&quot;&gt;&lt;a href=&quot;#record-something-happened-in-react-project&quot; class=&quot;headerlink&quot; title=&quot;record s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>good-code-framents</title>
    <link href="https://summerangel.github.io/2017/10/22/command-magic/"/>
    <id>https://summerangel.github.io/2017/10/22/command-magic/</id>
    <published>2017-10-22T13:30:12.000Z</published>
    <updated>2018-01-03T02:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="命令生成圣诞树"><a href="#命令生成圣诞树" class="headerlink" title="命令生成圣诞树"></a>命令生成圣诞树</h4><pre><code>打开终端，确认已安装node，输入  npm xmas生成一个头像：npm visnup</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;命令生成圣诞树&quot;&gt;&lt;a href=&quot;#命令生成圣诞树&quot; class=&quot;headerlink&quot; title=&quot;命令生成圣诞树&quot;&gt;&lt;/a&gt;命令生成圣诞树&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;打开终端，确认已安装node，输入  npm xmas
生成一个头像：npm vis
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>good-code-framents</title>
    <link href="https://summerangel.github.io/2017/10/22/good-code-framents/"/>
    <id>https://summerangel.github.io/2017/10/22/good-code-framents/</id>
    <published>2017-10-22T13:30:12.000Z</published>
    <updated>2018-04-02T09:24:46.615Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/10/22/good-code-framents/sun.jpg" alt="A lot need to learn,I'm such stupid" title="A lot need to learn,I'm such stupid"><h4 id="1、将一维数组转为二维数组："><a href="#1、将一维数组转为二维数组：" class="headerlink" title="1、将一维数组转为二维数组："></a>1、将一维数组转为二维数组：</h4><pre><code>var arr=[1,2,3,4,5,6,7],ar=[];               while(arr.length)ar.push(arr.splice(0,3));</code></pre><h4 id="2、手机号校验："><a href="#2、手机号校验：" class="headerlink" title="2、手机号校验："></a>2、手机号校验：</h4><pre><code>if ((mobile.length === 0) || !/^0?(13|15|18|14|17)[0-9]{9}$/.test(phone)) {    alert(&apos;请输入正确的手机号码&apos;);    return false;    }</code></pre><h4 id="3、密码长度只能为8-20位"><a href="#3、密码长度只能为8-20位" class="headerlink" title="3、密码长度只能为8~20位:"></a>3、密码长度只能为8~20位:</h4><pre><code>if (!/^[0-9a-zA-Z]{8,20}$/.test(password)) {    alert(&apos;密码长度只能为8~20位&apos;);    return false;}</code></pre><h4 id="4、验证6位验证码："><a href="#4、验证6位验证码：" class="headerlink" title="4、验证6位验证码："></a>4、验证6位验证码：</h4><pre><code>checkPayPassword(val) {    return /^\d{6}$/.test(val)    }</code></pre><h4 id="5、手机每四位空格隔开"><a href="#5、手机每四位空格隔开" class="headerlink" title="5、手机每四位空格隔开"></a>5、手机每四位空格隔开</h4><pre><code>phoneNoSplit (phone) {    let reg = /^(\d{4})(\d{4})(\d{3})$/;    let matches = reg.exec(phone);    return matches[1] + &apos; &apos; + matches[2] + &apos; &apos; + matches[3];  }</code></pre><h4 id="6、只输入数字带两位小数点"><a href="#6、只输入数字带两位小数点" class="headerlink" title="6、只输入数字带两位小数点"></a>6、只输入数字带两位小数点</h4><pre><code>const numberOnly = /^[1-9]+([.]{1}[0-9]{0,2}){0,1}$/;numberOnly.test(value);</code></pre><h4 id="6、头像处理"><a href="#6、头像处理" class="headerlink" title="6、头像处理"></a>6、头像处理</h4><pre><code>html:    &lt;input id=&quot;fileBtn&quot; type=&quot;file&quot; onchange=&quot;upload(&apos;#fileBtn&apos;, &apos;#img&apos;);&quot; accept=&quot;image/*&quot; /&gt;    # 解析    # accept 属性（允许上传两种文件类型：gif 和 jpeg）    # capture 捕获到系统默认的设备，有三个参数可设置  camera--照相机； camcorder--摄像机； microphone--录音    # 参数一表示 &quot;选择文件&quot; 的 id，参数二表示 &quot;显示图片&quot; 的 id，js:    var upload = function(c, d){        &quot;use strict&quot;;        var $c = document.querySelector(c),            $d = document.querySelector(d),            file = $c.files[0],            reader = new FileReader();        reader.readAsDataURL(file);        reader.onload = function(e){            $d.setAttribute(&quot;src&quot;, e.target.result);        };    };    # 解析    # 参数在上面 HTML 就已经讲解了，    # file 表示你选中的那个图片，然后它里面有几个属性 name、size、type、slice等，也都非常实用，    # FileReader作为文件API的重要成员用于读取文件，根据W3C的定义，FileReader接口提供了读取文件的方法和包含读取结果的事件模型。    # 调用 FileReader 的 readAsDataURL 接口，将启动异步加载文件内容，通过给 reader 监听一个 onload 事件，    # 将数据加载完毕后，在onload事件处理中，通过 event 的 result 属性即可获得文件内容，然后扔进 img 的 src 即可 打开图片并预览。    reference: https://www.idaima.com/article/12159</code></pre><h4 id="7、将一个数组加入到另外一个数组中："><a href="#7、将一个数组加入到另外一个数组中：" class="headerlink" title="7、将一个数组加入到另外一个数组中："></a>7、将一个数组加入到另外一个数组中：</h4><pre><code>Array.prototype.push.apply(updateNavListData[1].types,techList);</code></pre><h4 id="8、删除对象中值为空或者null的属性："><a href="#8、删除对象中值为空或者null的属性：" class="headerlink" title="8、删除对象中值为空或者null的属性："></a>8、删除对象中值为空或者null的属性：</h4><pre><code>for (var p in params) {        if (!params[p]) {          delete params[p];        }      }</code></pre><h4 id="9、动态给a标签加电话号码："><a href="#9、动态给a标签加电话号码：" class="headerlink" title="9、动态给a标签加电话号码："></a>9、动态给a标签加电话号码：</h4><pre><code>&lt;a href={&quot;tel:&quot; + this.state.orderDetailData.storePhone}  className=&quot;contact-shop&quot;&gt;联系门店&lt;/a&gt;</code></pre><h4 id="10、左右圆角："><a href="#10、左右圆角：" class="headerlink" title="10、左右圆角："></a>10、左右圆角：</h4><pre><code>.br-left {  border-top-left-radius: 20px;  border-bottom-left-radius: 20px;}.br-right {  border-top-right-radius: 20px;  border-bottom-right-radius: 20px;}</code></pre><h4 id="11、根据生日带出星座："><a href="#11、根据生日带出星座：" class="headerlink" title="11、根据生日带出星座："></a>11、根据生日带出星座：</h4><pre><code>// 根据生日的月份和日期，计算星座。function getAstro(month,day){  var s=&quot;魔羯水瓶双鱼牡羊金牛双子巨蟹狮子处女天秤天蝎射手魔羯&quot;;  var arr=[20,19,21,21,21,22,23,23,23,23,22,22];  return s.substr(month*2-(day&lt;arr[month-1]?2:0),2);}reference: http://m.jb51.net/article/98208.htm</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2017/10/22/good-code-framents/sun.jpg&quot; alt=&quot;A lot need to learn,I&#39;m such stupid&quot; title=&quot;A lot need to learn,I&#39;m such stupid&quot;&gt;
&lt;h4
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>change-to-hexo</title>
    <link href="https://summerangel.github.io/2017/10/22/change-to-hexo/"/>
    <id>https://summerangel.github.io/2017/10/22/change-to-hexo/</id>
    <published>2017-10-22T08:21:25.000Z</published>
    <updated>2017-12-27T07:22:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><p>This is a blog to record some commands to publish the blog based on hexo to avoid forgetting.</p><p>if you want to use hexo too, you could see the doc in hexo’s page,it tells you step by step.<br>the url is<br><a href="https://hexo.io/docs/" target="_blank" rel="external">https://hexo.io/docs/</a></p><p>The main command:</p><p>firstly,you should have git and node installed,it is fundamentally for developers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g // the command to install hexo-cli</div><div class="line"></div><div class="line">hexo init (folder&apos;s name) //init a hexo folder</div><div class="line"></div><div class="line">cd (folder&apos;s name) //to the folder&apos;s root path</div><div class="line"></div><div class="line">git init //at the folder&apos;s root path execute the command</div><div class="line"></div><div class="line">hexo server  //run the project (the url to open it is http://localhost:4000)</div></pre></td></tr></table></figure><p>below are the commands you will used frequently:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new page (folder&apos;s name) // this command creates a new folder, usually under the source folder</div><div class="line"></div><div class="line">hexo new [layout] (folder&apos;s name) //this command creates a new post which you can edit you blog</div></pre></td></tr></table></figure><p>finally, the deploy commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Steps&quot;&gt;&lt;a href=&quot;#Steps&quot; class=&quot;headerlink&quot; title=&quot;Steps&quot;&gt;&lt;/a&gt;Steps&lt;/h2&gt;&lt;p&gt;This is a blog to record some commands to publish the blog
      
    
    </summary>
    
    
      <category term="技术" scheme="https://summerangel.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://summerangel.github.io/2017/10/22/hello-world/"/>
    <id>https://summerangel.github.io/2017/10/22/hello-world/</id>
    <published>2017-10-22T06:46:01.000Z</published>
    <updated>2017-10-22T06:46:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
